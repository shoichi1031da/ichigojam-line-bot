No.,command,example,japanese_reading,format,description
1,LED,LED 1,エル・イー・ディー,LED 数,数が1ならLEDが光り、0なら消える
2,WAIT,WAIT 60,ウェイト,"WAIT 数1{,数2}",数1の数だけ待つ（60で１秒）。マイナスの数を指定すると走査線分で待つ(-261でWAIT1と同じ時間)。省略できる数2に0を指定すると画面表示を止め低電力化して待つ。
3,:,WAIT 60:LED 1,コロン,:,コマンドを後ろに続けて書くときの区切り記号
4,1,10 LED1,ワン,行番号 {コマンド},1. 数は-32768から32767まで表記できる。 2. 行頭の1〜32767で指定された数は行番号として、コマンドと合わせて記録する。コマンドを省略するとその行を削除（16385以上は指定しないと表示しない）
5,RUN,RUN,ラン,RUN,プログラムを実行する [F5]
6,LIST,"LIST 10,300",リスト,"LIST {行番号1{,行番号2}}",プログラムを表示する [F4] （行番号1で1行表示、行番号1がマイナスでその行まで表示、行番号2指定でその行まで表示、行番号2が0の時終わりまで表示、ESCで途中停止）
7,GOTO,GOTO 10,ゴートゥー,GOTO 行番号,指定した行番号へ飛ぶ（式も指定可能）
8,END,END,エンド,END,プログラムを終了する
9,IF,IF BTN() END,イフ,IF 数 {THEN} コマンド1 {ELSE コマンド2},"数が0でなければコマンド1を実行し、0であればコマンド2を実行する（THEN,ELSE以降は省略可、ただし16進数後は:で区切る必要あり）"
10,THEN,IF BTN() THEN END,ゼン,IF 数 {THEN} コマンド1 {ELSE コマンド2},"数が0でなければコマンド1を実行し、0であればコマンド2を実行する（THEN,ELSE以降は省略可、ただし16進数後は:で区切る必要あり）"
11,ELSE,IF BTN() END ELSE CONT,エルス,IF 数 {THEN} コマンド1 {ELSE コマンド2},"数が0でなければコマンド1を実行し、0であればコマンド2を実行する （THEN,ELSE以降は省略可、ただし16進数後は:で区切る必要あり）"
12,BTN,LED BTN(),ボタン,BTN({数}),ボタンが押されていれば1、そうでないとき0を返す（数：0(付属ボタン)/UP/DOWN/RIGHT/LEFT/SPACE/X(88)、省略で0、-1でビットパターンで返す）
13,NEW,NEW,ニュー,NEW,プログラムを全部消す
14,PRINT,"PRINT ""HI!"";15",プリント,PRINT {数や文字列},"数や文字列を表示する （文字列は""で囲む、"";"" で連結できる）"
15,?,"?""HI!"";15",クエスション,? {数や文字列},"数や文字列を表示する （文字列は""で囲む、"";"" で連結できる）"
16,LOCATE,"LOCATE 3,3",ロケート,"LOCATE 数1{,数2{,数3}}","次に文字を書く位置を横、縦の順に指定する（左上が0,0、縦=-1で無表示）。数1のみでX+Y*幅。数3が0でなければ指定した場所にカーソルを表示する。"
17,LC,"LC 3,3",ロケート,"LC 数1{,数2{,数3}}","次に文字を書く位置を横、縦の順に指定する（左上が0,0、縦=-1で無表示）。数1のみでX+Y*幅。数3が0でなければ指定した場所にカーソルを表示する。"
18,CLS,CLS,クリア・スクリーン,CLS,画面を全部消す
19,RND,PRINT RND(6),ランダム,RND(数),0から数未満のでたらめな整数を返す
20,SAVE,SAVE 1,セーブ,SAVE {数},プログラムを保存する（0〜3の4つ、100-227 外付けEEPROM、省略で前回使用した数） ボタンを押した状態で起動すると0番を読み込み自動実行
21,LOAD,LOAD,ロード,LOAD {数},プログラムを読み出す（0〜3の4つ、100-227 外付けEEPROM、省略で前回使用した数）
22,FILES,FILES,ファイルズ,"FILES {数1{,数2}}",数1(省略可)〜数2のプログラム一覧を表示する（EEPROM内ファイル表示に対応、0指定ですべて表示、ESCで途中停止）
23,BEEP,BEEP,ビープ,"BEEP {数1{,数2}}",単音を鳴らす 周期(0-32767)と長さ(1/60秒単位)は省略可 ※SOUND(EX2)-GNDに圧電サウンダーなどの接続が必要
24,PLAY,"PLAY ""$CDE2CDE2""",プレイ,"PLAY {""MML""}",MML、記述した音楽を鳴らす。省略で音停止 ※SOUND(EX2)-GNDに圧電サウンダーなどの接続が必要 （MML、CDEFGAB：ドレミファソラシ、R：休符、.：音や休符を1.5倍伸ばす、T120：テンポ、O4：オクターブ(1-6)、N10：単音、<：オクターブ上げる、>：オクターブ下げる、$：繰り返し、'：以後鳴らさない）
25,TEMPO,TEMPO 1200,テンポ,TEMPO 数,再生中の音楽のテンポを変更する
26,+,PRINT 1+1,プラス,数 + 数,足し算する
27,-,PRINT 2-1,マイナス,数 - 数,1. 引き算する 2. 後に続く数をマイナスにする
28,*,PRINT 7*8,アスタリスク,数 * 数,掛け算する
29,/,PRINT 9/3,スラッシュ,数 / 数,割り算する（小数点以下は切り捨て）
30,%,PRINT 10%3,パーセント,数 % 数,割り算した余りを返す
31,(),PRINT 1+(1*2),ブラケット,(式),カッコ内の式を優先して計算する
32,LET,"LET A,1",レット,"LET 変数,数","数をアルファベット１文字の変数や配列の値として記憶する（配列へ連続代入可能 LET[0],1,2）"
33,=,A=1,イコール,変数=数,1. 数をアルファベット１文字の変数や配列の値として記憶する。 2. 式として使うと==と同じ機能となる
34,INPUT,"INPUT ""ANS?"",A",インプット,"INPUT {文字列,}変数",キーボードやUARTからの入力で数値を変数にいれる（文字列とコンマは省略可）
35,TICK,PRINT TICK(),ティック,TICK({数}),CLTからの時間を返す（1/60秒で1進む） *数に1指定で1/(60*261)秒で1進む時間
36,CLT,CLT,クリア・ティック,CLT,TICK()のカウントをリセットする
37,INKEY,PRINT INKEY(),インキー,INKEY(),キーボードやUARTから１文字入力する（入力がない時は0、UARTから0が入力された時は#100）
38,LEFT,IF INKEY()=LEFT LED1,レフト,LEFT,28を返す。INKEYのキーコードの判定や、SCROLLに使う
39,RIGHT,IF INKEY()=RIGHT LED1,ライト,RIGHT,29を返す。INKEYのキーコードの判定や、SCROLLに使う
40,UP,IF INKEY()=UP LED1,アップ,UP,30を返す。INKEYのキーコードの判定や、SCROLLに使う
41,DOWN,IF INKEY()=DOWN LED1,ダウン,DOWN,31を返す。INKEYのキーコードの判定や、SCROLLに使う
42,SPACE,IF INKEY()=SPACE LED1,スペース,SPACE,32を返す。INKEYのキーコードの判定や、SCROLLに使う
43,CHR,PRINT CHR$(65),キャラクター,"CHR$(数{,数2{,数3…}})",PRINT内で、文字コードに対応する文字を返す（コンマ区切りで連続表記可）
44,ASC,"PRINT ASC(""A"")",アスキー,"ASC(""文字"")",文字に対する文字コードを返す
45,SCROLL,SCROLL 2,スクロール,SCROLL 数,指定した方向に1キャラ分スクロールする（0/UP:上、1/RIGHT:右、2/DOWN:下、3/LEFT:左）
46,SCR,"PRINT SCR(0,0)",スクリーン,"SCR({数,数})",画面上の指定した位置に書かれた文字コードを返す（指定なしで現在位置）
47,VPEEK,"PRINT VPEEK(0,0)",ブイ・ピーク,"VPEEK({数,数})",画面上の指定した位置に書かれた文字コードを返す（指定なしで現在位置）
48,==,IF A==B LED 1,イコール・イコール,数 == 数,比較して等しい時に1、それ以外で0を返す。
49,!=,IF A!=B LED 1,ノット・イコール・トゥー,数 != 数,比較して等しくない時に1、それ以外で0を返す
50,<>,IF A<>B LED 1,レス・アンド・グレーター・ザン,数 <> 数,比較して等しくない時に1、それ以外で0を返す
51,<=,IF A<=B LED 1,レス・ザン・オア・イコール・トゥー,数 <= 数,比較して以下の時に1、それ以外で0を返す
52,<,IF A<B LED 1,レス・ザン,数 < 数,比較して未満の時に1、それ以外で0を返す
53,>=,IF A>=B LED 1,グレーター・ザン・オア・イコール・トゥー,数 >= 数,比較して以上の時に1、それ以外で0を返す
54,>,IF A>B LED 1,グレーター・ザン,数 > 数,比較してより大きい時に1、それ以外で0を返す
55,AND,IF A=1 AND B=1 LED 1,アンド,式 AND 式,どちらの式も1の時に1、それ以外で0を返す
56,&&,IF A=1 && B=1 LED 1,アンド,式 && 式,どちらの式も1の時に1、それ以外で0を返す
57,OR,IF A=1 OR B=1 LED 1,オア,式 OR 式,どちらかの式が1の時に1、それ以外で0を返す
58,||,IF A=1 || B=1 LED 1,オア,式 || 式,どちらかの式が1の時に1、それ以外で0を返す
59,NOT,IF NOT A=1 LED 1,ノット,NOT 式,式が0の時に1、それ以外で0を返す
60,!,IF !(A=1) LED 1,ノット,! 式,式が0の時に1、それ以外で0を返す
61,REM,REM START,リマーク,REM,これ以降のコマンドを実行しない（コメント機能）
62,', START,シングル・クォート,',これ以降のコマンドを実行しない（コメント機能）
63,FOR,FOR I=0 TO 10:?I:NEXT,フォー,FOR 変数=数1 TO 数2 {STEP 数3}:コマンド:NEXT,変数に数1をいれ、数2になるまで数3ずつ増やしながらNEXTまでをくりかえす （STEPは省略可、6段まで）
64,TO,FOR I=0 TO 10:?I:NEXT,トゥー,FOR 変数=数1 TO 数2 {STEP 数3}:コマンド:NEXT,変数に数1をいれ、数2になるまで数3ずつ増やしながらNEXTまでをくりかえす （STEP省略時は数3は1、6段まで）
65,STEP,FOR I=0 TO 10:?I:NEXT,ステップ,FOR 変数=数1 TO 数2 STEP 数3:コマンド:NEXT,変数に数1をいれ、数2になるまで数3ずつ増やしながらNEXTまでをくりかえす （STEPは省略可、6段まで）
66,NEXT,FOR I=0 TO 10:?I:NEXT,ネクスト,FOR 変数=数1 TO 数2 {STEP 数3}:コマンド:NEXT,変数に数1をいれ、数2になるまで数3ずつ増やしながらNEXTまでをくりかえす （STEPは省略可、6段まで）
67,POS,"?POS(0),POS(1)",ポジション,POS({数}),カーソル位置を返す（数、省略時または0:X+Y*幅、1:X座標、2:Y座標） *ver1.4以上
68,DRAW,"DRAW 1,5,10,15",ドロー,"DRAW 数1,数2{,数3,数4}{,数5}","数1,数2の座標から数3,数4の座標へ線を引く（座標は最大63x47）、数5に0指定で線を消し、2指定で反転する、省略時または1指定で線を引く *ver1.4以上"
69,POINT,"?POINT(1,5)",ポイント,"POINT(数1,数2)","数1,数2の座標にDRAWで描かれた点または文字があるときに1、そうでないとき0を返す *ver1.4以上"
70,OUT,"OUT 1,1",アウト,"OUT 数1{,数2}",外部出力OUT1-11に0または1を出力する 数2を省略でまとめて出力できる（数2に-1指定でINへ切り替え、-2指定でプルアップ付きINへ切り替え ※IN3は除く）
71,IN,"LET A,IN(1)",イン,IN({数}),"IN0-10から入力する（0または1） 数を省略してまとめて入力できる （IN0,1,4,9はプルアップ、IN5-8,10-11はOUTで切り替え時使用可能、IN0,9はボタン）"
72,ANA,?ANA(),アナログ,ANA({数}),"外部入力の電圧(0V-3.3V)を0-1023の数値で返す(2:IN2、5-8:IN5-8(OUT1-4)、0,9:BTN、省略で0)"
73,PWM,"PWM 2,100",ピー・ダブリュー・エム,"PWM 数1,数2{,数3}",外部出力OUT2-5に数2で0.01msec単位で指定するパルスを出力する（0-2000、周期20msec）、数3で周期を指定（省略時2000=20msec、マイナス値指定で周期1/480）
74,CLV,CLV,クリア・バリアブル,CLV,変数、配列を全部0にする
75,CLEAR,CLEAR,クリア,CLEAR,変数、配列を全部0にする
76,CLK,CLK,クリア・キー,CLK,キーバッファとキーの状態をクリアする
77,CLO,CLO,クリア・アウトプット,CLO,入出力ピンを初期状態に戻す
78,ABS,?ABS(-2),アブソリュート,ABS(数),絶対値を返す（マイナスはプラスになる）
79,[],[3]=1,アレイ,[数],"配列（[0]から[101]までの102コの連続した変数として使える） LET[0],1,2,3で連続代入可能"
80,GOSUB,GOSUB 100,ゴーサブ,GOSUB 行番号,戻り先をスタックに積み、数または式で指定した行番号に飛ぶ（ネストは30段まで）
81,GSB,GSB 100,ゴーサブ,GSB 行番号,戻り先をスタックに積み、数または式で指定した行番号に飛ぶ（ネストは30段まで）
82,RETURN,RETURN,リターン,RETURN,GOSUB/GSBの呼び出し元へ戻る
83,RTN,RTN,リターン,RTN,GOSUB/GSBの呼び出し元へ戻る
84,DEC,"?DEC$(99,3)",デシ,"DEC$(数1{,数2})",PRINT内で、数を文字列にする（２番目の数は桁数、省略可）
85,#,#FF,ハッシュ,#16進数,16進数で数を表記する *この後THENを省略しA〜Fで始まるコマンドを使う場合 : で区切る
86,HEX,"?HEX$(255,2)",ヘックス,"HEX$(数1{,数2})",PRINT内で、数を16進数の文字列にする（２番目の数は桁数、省略可）
87,`,`1010,バック・クォート,`2進数,2進数で数を表記する
88,BIN,"?BIN$(255,8)",バイナリー,"BIN$(数1{,数2})",PRINT内で、数を2進数の文字列にする（２番目の数は桁数、省略可）
89,&,?3&1,アンパサンド,数 & 数,論理積（ビット演算）
90,|,?3|1,パイプ,数 | 数,論理和（ビット演算）
91,^,?A^1,ハット,数 ^ 数,排他的論理和（ビット演算）
92,>>,?A>>1,シフト・ライト,数 >> 数,右シフトする（ビット演算）
93,<<,?A<<1,シフト・レフト,数 << 数,左シフトする（ビット演算）
94,~,?~A,チルダ,~数,ビット反転（ビット演算）
95,COS,?COS(90),コサイン,COS(数),指定された数を角度の度数としてコサインの値の256倍を返す *ver1.4以上
96,SIN,?SIN(90),サイン,SIN(数),指定された数を角度の度数としてサインの値の256倍を返す *ver1.4以上
97,STOP,STOP,ストップ,STOP,プログラムを中断する
98,CONT,CONT,コンティニュー,CONT,実行中の行や、中断した行を再度実行する
99,SOUND,?SOUND(),サウンド,SOUND(),音が再生中なら1、そうで無いとき0をを返す
100,FREE,?FREE(),フリー,FREE(),プログラムの残りメモリ数を返す
101,VER,?VER(),バージョン,VER({数}),IchigoJam BASICのバージョン番号を返す
102,RENUM,RENUM,リナンバー,"RENUM {数1{,数2}}",プログラムの行番号を数1(省略時は10)から数2(省略時は10)刻みにする。GOTO/GOSUBの飛び先は手で変更必要な場合がある
103,LRUN,LRUN 1,ロードラン,"LRUN {数1{,数2}}",ファイル数1のプログラムを読み込み後、実行する(数2が指定されていたらその行へGOTO)
104,FILE,?FILE(),ファイル,FILE(),最後にプログラムを読み込み、書き込み行った数を返す
105,LINE,?LINE(),ライン,LINE(),現在実行中の行番号を返す（非実行時は0）
106,SRND,SRND 0,エス・ランダム,SRND 数,種を指定して乱数を初期化する
107,HELP,HELP,ヘルプ,HELP,メモリマップを表示する
108,PEEK,?PEEK(#700),ピーク,PEEK(数),メモリ読み出し（キャラクターパターン0-#7FFなど）
109,POKE,"POKE #700,#FF",ポーク,"POKE 数,数","メモリへの書き込み（連続書き込み可能 POKE#700,1,2,3）"
110,COPY,"COPY #900,0,256",コピー,"COPY 数1,数2,数3",メモリコピー 数1のアドレスへ数2のアドレスから数3の長さ分コピー(数3マイナスでコピー方向が逆になる)
111,CLP,CLP,クリア・パターン,CLP,キャラクターパターン(#700-#7FF)を初期化する
112,"""","A=""ABC""",ダブル・クォート,"""文字列""",文字列の先頭アドレスを返す
113,STR,PRINT STR$(A),ストリング,"STR$(数1{,数2})",PRINT内で、文字列を返す（数2(省略可)で長さ指定）
114,LEN,"PRINT LEN(""ABC"")",レングス,"LEN(""文字列"")",文字列の長さを返す
115,@,@LOOP,アット・マーク,@ラベル,行の先頭に書くとラベルとなり、行番号の代わりとして使える（GOTO @LOOPなど） ※前方一致
116,VIDEO,VIDEO 0,ビデオ,"VIDEO 数1{,数2}",画面表示非表示を切り替える 0で画面表示を停止し処理高速化 （F8で表示）、省略可能な数2でVIDEO0時CPUクロックを1/数2に変更し省電力化、数1が2の倍数で白黒反転、数1が3以上で拡大モード
117,RESET,RESET,リセット,RESET,IchigoJamをリセットする
118,SLEEP,SLEEP,スリープ,SLEEP,プログラムを休止する (ボタンを押すと起動し、LRUN0を実行する)
119,UART,UART 0,ユー・アート,"UART 数1{,数2}",数1：シリアル出力設定（0:オフ、1:PRINTのみ、2:PRINT/LC/CLS/SCROLL、3:PRINTのみ/改行コード\r\n、+4で入力エコーバック、+8で画面表示OFF、初期値:2）、数2：シリアル受信設定（0:オフ、1:オン、+2:ESC無効、+4:CR変換(13→10) 省略時1）
120,BPS,BPS 9600,ビー・ピー・エス,"BPS 数1{,数2}","シリアル通信速度を変更する(0で初期値の115,200bps、-1:57600bps、-2:38400bps、-100以下指定で指定した数の-100倍bpsに指定、-2304:230400bps)。数2でI2Cの通信速度設定（単位kHz、0:デフォルト400kHz)"
121,OK,OK 2,オーケー,OK {数},OKやエラーメッセージの表示有無を切り替える（数、1:表示、2:非表示、省略で1）
122,I2CR,"R=I2CR(#50,#114A,2,#114C,2)",アイ・ツー・シー・リード,"I2CR(数1,数2,数3,数4,数5)",I2Cで周辺機器から読み込む I2Cアドレス、コマンド送信アドレス・長さ、受信アドレスと長さ（コマンド送信が1byteの時数3を省略可、コマンド送信が0byteの時数2/数3を省略可）
123,I2CW,"R=I2CW(#50,#114A,2,#114C,2)",アイ・ツー・シー・ライト,"I2CW(数1,数2,数3,数4,数5)",I2Cで周辺機器に書き込む I2Cアドレス、コマンド送信アドレス・長さ、送信アドレスと長さ（数4/数5は省略可、コマンド送信が1byteの時数3を省略可）
124,IOT.IN,R=IoT.IN(),アイ・オー・ティー・イン,IoT.IN(),sakura.ioモジュールから受信した数を一つ読み込む
125,IOT.OUT,IoT.OUT 100,アイ・オー・ティー・アウト,IoT.OUT 数,sakura.ioモジュールへ数をチャンネル0で即時送信する
126,WS.LED,WS.LED 3,ダブリュー・エス・エル・イー・ディー,"WS.LED 数1{,数2}",配列の先頭から緑赤青の順に設定された値でLEDに接続されたWS2812Bを数1の分光らせる。数2を指定するとその数だけ繰り返す。 *ver1.4以上
127,SWITCH,SWITCH,スイッチ,"SWITCH {数1{,数2}}",画面表示をテレビと液晶とを切り替える（数1 0:テレビ、1:液晶）、数2で液晶の濃さを指定
128,USR,"A=USR(#700,0)",ユーザー,"USR(数1{,数2})",数1で指定されたアドレスのマシン語(Arm Cortex-M0)を数2をパラメータとして呼び出す（数2省略で0）