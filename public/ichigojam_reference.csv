No.,command,jpname,aname,format,example,description,document,
1,LED,エル・イー・ディー,,LED 数,LED 1,数が1ならLEDが光り、0なら消える,https://ichigojam.github.io/print/ja/LED.html,
2,WAIT,ウェイト,,"WAIT 数1{,数2}",WAIT 60,数1の数だけ待つ（60で１秒）。マイナスの数を指定すると走査線分で待つ(-261でWAIT1と同じ時間)。省略できる数2に0を指定すると画面表示を止め低電力化して待つ。,https://ichigojam.github.io/print/ja/WAIT.html,
3,:,コロン,,:,WAIT 60:LED 1,コマンドを後ろに続けて書くときの区切り記号,,
4,1,ワン,,行番号 {コマンド},10 LED1,1. 数は-32768から32767まで表記できる。 2. 行頭の1〜32767で指定された数は行番号として、コマンドと合わせて記録する。コマンドを省略するとその行を削除（16385以上は指定しないと表示しない）,,
5,RUN,ラン,,RUN,RUN,プログラムを実行する [F5],https://ichigojam.github.io/print/ja/RUN-LIST.html,
6,LIST,リスト,,"LIST {行番号1{,行番号2}}","LIST 10,300",プログラムを表示する [F4] （行番号1で1行表示、行番号1がマイナスでその行まで表示、行番号2指定でその行まで表示、行番号2が0の時終わりまで表示、ESCで途中停止）,https://ichigojam.github.io/print/ja/RUN-LIST.html,
7,GOTO,ゴートゥー,,GOTO 行番号,GOTO 10,指定した行番号へ飛ぶ（式も指定可能）,https://ichigojam.github.io/print/ja/GOTO.html,
8,END,エンド,,END,END,プログラムを終了する,,
9,IF,イフ,,IF 数 {THEN} コマンド1 {ELSE コマンド2},IF BTN() END,"数が0でなければコマンド1を実行し、0であればコマンド2を実行する（THEN,ELSE以降は省略可、ただし16進数後は:で区切る必要あり）",https://ichigojam.github.io/print/ja/IF.html,
10,THEN,ゼン,,IF 数 {THEN} コマンド1 {ELSE コマンド2},IF BTN() THEN END,"数が0でなければコマンド1を実行し、0であればコマンド2を実行する（THEN,ELSE以降は省略可、ただし16進数後は:で区切る必要あり）",,
11,ELSE,エルス,,IF 数 {THEN} コマンド1 {ELSE コマンド2},IF BTN() END ELSE CONT,"数が0でなければコマンド1を実行し、0であればコマンド2を実行する （THEN,ELSE以降は省略可、ただし16進数後は:で区切る必要あり）",,
12,BTN,ボタン,,BTN({数}),LED BTN(),ボタンが押されていれば1、そうでないとき0を返す（数：0(付属ボタン)/UP/DOWN/RIGHT/LEFT/SPACE/X(88)、省略で0、-1でビットパターンで返す）,https://ichigojam.github.io/print/ja/BTN.html,
13,NEW,ニュー,,NEW,NEW,プログラムを全部消す,https://ichigojam.github.io/print/ja/SAVE-LOAD-NEW.html,
14,PRINT,プリント,?,PRINT {数や文字列},"PRINT ""HI!"";15","数や文字列を表示する （文字列は""で囲む、"";"" で連結できる）",https://ichigojam.github.io/print/ja/PRINT.html,
15,?,クエスション,PRINT,? {数や文字列},"?""HI!"";15","数や文字列を表示する （文字列は""で囲む、"";"" で連結できる）",https://ichigojam.github.io/print/ja/PRINT.html,
16,LOCATE,ロケート,LC,"LOCATE 数1{,数2{,数3}}","LOCATE 3,3","次に文字を書く位置を横、縦の順に指定する（左上が0,0、縦=-1で無表示）。数1のみでX+Y*幅。数3が0でなければ指定した場所にカーソルを表示する。",https://ichigojam.github.io/print/ja/LOCATE.html,
17,LC,ロケート,LOCATE,"LC 数1{,数2{,数3}}","LC 3,3","次に文字を書く位置を横、縦の順に指定する（左上が0,0、縦=-1で無表示）。数1のみでX+Y*幅。数3が0でなければ指定した場所にカーソルを表示する。",https://ichigojam.github.io/print/ja/LOCATE.html,
18,CLS,クリア・スクリーン,,CLS,CLS,画面を全部消す,,
19,RND,ランダム,,RND(数),PRINT RND(6),0から数未満のでたらめな整数を返す,https://ichigojam.github.io/print/ja/RND.html,
20,SAVE,セーブ,,SAVE {数},SAVE 1,プログラムを保存する（0〜3の4つ、100-227 外付けEEPROM、省略で前回使用した数） ボタンを押した状態で起動すると0番を読み込み自動実行,https://ichigojam.github.io/print/ja/SAVE-LOAD-NEW.html,
21,LOAD,ロード,,LOAD {数},LOAD,プログラムを読み出す（0〜3の4つ、100-227 外付けEEPROM、省略で前回使用した数）,https://ichigojam.github.io/print/ja/SAVE-LOAD-NEW.html,
22,FILES,ファイルズ,,"FILES {数1{,数2}}",FILES,数1(省略可)〜数2のプログラム一覧を表示する（EEPROM内ファイル表示に対応、0指定ですべて表示、ESCで途中停止）,,
23,BEEP,ビープ,,"BEEP {数1{,数2}}",BEEP,単音を鳴らす 周期(0-32767)と長さ(1/60秒単位)は省略可 ※SOUND(EX2)-GNDに圧電サウンダーなどの接続が必要,https://ichigojam.github.io/print/ja/BEEP.html,
24,PLAY,プレイ,,"PLAY {""MML""}","PLAY ""$CDE2CDE2""",MML、記述した音楽を鳴らす。省略で音停止 ※SOUND(EX2)-GNDに圧電サウンダーなどの接続が必要 （MML、CDEFGAB：ドレミファソラシ、R：休符、.：音や休符を1.5倍伸ばす、T120：テンポ、O4：オクターブ(1-6)、N10：単音、<：オクターブ上げる、>：オクターブ下げる、$：繰り返し、'：以後鳴らさない）,https://ichigojam.github.io/print/ja/PLAY.html,
25,TEMPO,テンポ,,TEMPO 数,TEMPO 1200,再生中の音楽のテンポを変更する,,
26,+,プラス,,数 + 数,PRINT 1+1,足し算する,,
27,-,マイナス,,数 - 数,PRINT 2-1,1. 引き算する 2. 後に続く数をマイナスにする,,
28,*,アスタリスク,,数 * 数,PRINT 7*8,掛け算する,,
29,/,スラッシュ,,数 / 数,PRINT 9/3,割り算する（小数点以下は切り捨て）,,
30,%,パーセント,,数 % 数,PRINT 10%3,割り算した余りを返す,,
31,(),ブラケット,,(式),PRINT 1+(1*2),カッコ内の式を優先して計算する,,
32,LET,レット,=,"LET 変数,数","LET A,1","数をアルファベット１文字の変数や配列の値として記憶する（配列へ連続代入可能 LET[0],1,2）",https://ichigojam.github.io/print/ja/LET.html,
33,=,イコール,LET,変数=数,A=1,1. 数をアルファベット１文字の変数や配列の値として記憶する。 2. 式として使うと==と同じ機能となる,https://ichigojam.github.io/print/ja/LET.html,
34,INPUT,インプット,,"INPUT {文字列,}変数","INPUT ""ANS?"",A",キーボードやUARTからの入力で数値を変数にいれる（文字列とコンマは省略可）,https://ichigojam.github.io/print/ja/INPUT.html,
35,TICK,ティック,,TICK({数}),PRINT TICK(),CLTからの時間を返す（1/60秒で1進む） *数に1指定で1/(60*261)秒で1進む時間,https://ichigojam.github.io/print/ja/TICK.html,
36,CLT,クリア・ティック,,CLT,CLT,TICK()のカウントをリセットする,https://ichigojam.github.io/print/ja/TICK.html,
37,INKEY,インキー,,INKEY(),PRINT INKEY(),キーボードやUARTから１文字入力する（入力がない時は0、UARTから0が入力された時は#100）,,
38,LEFT,レフト,,LEFT,IF INKEY()=LEFT LED1,28を返す。INKEYのキーコードの判定や、SCROLLに使う,,
39,RIGHT,ライト,,RIGHT,IF INKEY()=RIGHT LED1,29を返す。INKEYのキーコードの判定や、SCROLLに使う,,
40,UP,アップ,,UP,IF INKEY()=UP LED1,30を返す。INKEYのキーコードの判定や、SCROLLに使う,,
41,DOWN,ダウン,,DOWN,IF INKEY()=DOWN LED1,31を返す。INKEYのキーコードの判定や、SCROLLに使う,,
42,SPACE,スペース,,SPACE,IF INKEY()=SPACE LED1,32を返す。INKEYのキーコードの判定や、SCROLLに使う,,
43,CHR,キャラクター,,"CHR$(数{,数2{,数3…}})",PRINT CHR$(65),PRINT内で、文字コードに対応する文字を返す（コンマ区切りで連続表記可）,,https://ichigojam.github.io/print/ja/CHR.html
44,ASC,アスキー,,"ASC(""文字"")","PRINT ASC(""A"")",文字に対する文字コードを返す,,https://ichigojam.github.io/print/ja/CHR.html
45,SCROLL,スクロール,,SCROLL 数,SCROLL 2,指定した方向に1キャラ分スクロールする（0/UP:上、1/RIGHT:右、2/DOWN:下、3/LEFT:左）,,
46,SCR,スクリーン,VPEEK,"SCR({数,数})","PRINT SCR(0,0)",画面上の指定した位置に書かれた文字コードを返す（指定なしで現在位置）,,
47,VPEEK,ブイ・ピーク,SCR,"VPEEK({数,数})","PRINT VPEEK(0,0)",画面上の指定した位置に書かれた文字コードを返す（指定なしで現在位置）,,
48,==,イコール・イコール,=,数 == 数,IF A==B LED 1,比較して等しい時に1、それ以外で0を返す。,,
49,!=,ノット・イコール・トゥー,<>,数 != 数,IF A!=B LED 1,比較して等しくない時に1、それ以外で0を返す,,
50,<>,レス・アンド・グレーター・ザン,!=,数 <> 数,IF A<>B LED 1,比較して等しくない時に1、それ以外で0を返す,,
51,<=,レス・ザン・オア・イコール・トゥー,,数 <= 数,IF A<=B LED 1,比較して以下の時に1、それ以外で0を返す,,
52,<,レス・ザン,,数 < 数,IF A<B LED 1,比較して未満の時に1、それ以外で0を返す,,
53,>=,グレーター・ザン・オア・イコール・トゥー,,数 >= 数,IF A>=B LED 1,比較して以上の時に1、それ以外で0を返す,,
54,>,グレーター・ザン,,数 > 数,IF A>B LED 1,比較してより大きい時に1、それ以外で0を返す,,
55,AND,アンド,&&,式 AND 式,IF A=1 AND B=1 LED 1,どちらの式も1の時に1、それ以外で0を返す,,
56,&&,アンド,AND,式 && 式,IF A=1 && B=1 LED 1,どちらの式も1の時に1、それ以外で0を返す,,
57,OR,オア,||,式 OR 式,IF A=1 OR B=1 LED 1,どちらかの式が1の時に1、それ以外で0を返す,,
58,||,オア,OR,式 || 式,IF A=1 || B=1 LED 1,どちらかの式が1の時に1、それ以外で0を返す,,
59,NOT,ノット,!,NOT 式,IF NOT A=1 LED 1,式が0の時に1、それ以外で0を返す,,
60,!,ノット,NOT,! 式,IF !(A=1) LED 1,式が0の時に1、それ以外で0を返す,,
61,REM,リマーク,',REM,REM START,これ以降のコマンドを実行しない（コメント機能）,,
62,',シングル・クォート,REM,',START,これ以降のコマンドを実行しない（コメント機能）,,
63,FOR,フォー,,FOR 変数=数1 TO 数2 {STEP 数3}:コマンド:NEXT,FOR I=0 TO 10:?I:NEXT,変数に数1をいれ、数2になるまで数3ずつ増やしながらNEXTまでをくりかえす （STEPは省略可、6段まで）,https://ichigojam.github.io/print/ja/FOR.html,
64,TO,トゥー,,FOR 変数=数1 TO 数2 {STEP 数3}:コマンド:NEXT,FOR I=0 TO 10:?I:NEXT,変数に数1をいれ、数2になるまで数3ずつ増やしながらNEXTまでをくりかえす （STEP省略時は数3は1、6段まで）,https://ichigojam.github.io/print/ja/FOR.html,
65,STEP,ステップ,,FOR 変数=数1 TO 数2 STEP 数3:コマンド:NEXT,FOR I=0 TO 10:?I:NEXT,変数に数1をいれ、数2になるまで数3ずつ増やしながらNEXTまでをくりかえす （STEPは省略可、6段まで）,https://ichigojam.github.io/print/ja/FOR.html,
66,NEXT,ネクスト,,FOR 変数=数1 TO 数2 {STEP 数3}:コマンド:NEXT,FOR I=0 TO 10:?I:NEXT,変数に数1をいれ、数2になるまで数3ずつ増やしながらNEXTまでをくりかえす （STEPは省略可、6段まで）,https://ichigojam.github.io/print/ja/FOR.html,
67,POS,ポジション,,POS({数}),"?POS(0),POS(1)",カーソル位置を返す（数、省略時または0:X+Y*幅、1:X座標、2:Y座標） *ver1.4以上,,
68,DRAW,ドロー,,"DRAW 数1,数2{,数3,数4}{,数5}","DRAW 1,5,10,15","数1,数2の座標から数3,数4の座標へ線を引く（座標は最大63x47）、数5に0指定で線を消し、2指定で反転する、省略時または1指定で線を引く *ver1.4以上",https://ichigojam.github.io/print/ja/DRAW.html,
69,POINT,ポイント,,"POINT(数1,数2)","?POINT(1,5)","数1,数2の座標にDRAWで描かれた点または文字があるときに1、そうでないとき0を返す *ver1.4以上",,
70,OUT,アウト,,"OUT 数1{,数2}","OUT 1,1",外部出力OUT1-11に0または1を出力する 数2を省略でまとめて出力できる（数2に-1指定でINへ切り替え、-2指定でプルアップ付きINへ切り替え ※IN3は除く）,https://ichigojam.github.io/print/ja/OUT.html,
71,IN,イン,,IN({数}),"LET A,IN(1)","IN0-10から入力する（0または1） 数を省略してまとめて入力できる （IN0,1,4,9はプルアップ、IN5-8,10-11はOUTで切り替え時使用可能、IN0,9はボタン）",https://ichigojam.github.io/print/ja/IN.html,
72,ANA,アナログ,,ANA({数}),?ANA(),"外部入力の電圧(0V-3.3V)を0-1023の数値で返す(2:IN2、5-8:IN5-8(OUT1-4)、0,9:BTN、省略で0)",https://ichigojam.github.io/print/ja/ANA.html,
73,PWM,ピー・ダブリュー・エム,,"PWM 数1,数2{,数3}","PWM 2,100",外部出力OUT2-5に数2で0.01msec単位で指定するパルスを出力する（0-2000、周期20msec）、数3で周期を指定（省略時2000=20msec、マイナス値指定で周期1/480）,https://ichigojam.github.io/print/ja/PWM.html,
74,CLV,クリア・バリアブル,CLEAR,CLV,CLV,変数、配列を全部0にする,,
75,CLEAR,クリア,CLV,CLEAR,CLEAR,変数、配列を全部0にする,,
76,CLK,クリア・キー,,CLK,CLK,キーバッファとキーの状態をクリアする,,
77,CLO,クリア・アウトプット,,CLO,CLO,入出力ピンを初期状態に戻す,,
78,ABS,アブソリュート,,ABS(数),?ABS(-2),絶対値を返す（マイナスはプラスになる）,,
79,[],アレイ,,[数],[3]=1,"配列（[0]から[101]までの102コの連続した変数として使える） LET[0],1,2,3で連続代入可能",,
80,GOSUB,ゴーサブ,GSB,GOSUB 行番号,GOSUB 100,戻り先をスタックに積み、数または式で指定した行番号に飛ぶ（ネストは30段まで）,,
81,GSB,ゴーサブ,GOSUB,GSB 行番号,GSB 100,戻り先をスタックに積み、数または式で指定した行番号に飛ぶ（ネストは30段まで）,,
82,RETURN,リターン,RTN,RETURN,RETURN,GOSUB/GSBの呼び出し元へ戻る,,
83,RTN,リターン,RETURN,RTN,RTN,GOSUB/GSBの呼び出し元へ戻る,,
84,DEC,デシ,,"DEC$(数1{,数2})","?DEC$(99,3)",PRINT内で、数を文字列にする（２番目の数は桁数、省略可）,,
85,#,ハッシュ,,#16進数,#FF,16進数で数を表記する *この後THENを省略しA〜Fで始まるコマンドを使う場合 : で区切る,https://ichigojam.github.io/print/ja/HEX.html,
86,HEX,ヘックス,,"HEX$(数1{,数2})","?HEX$(255,2)",PRINT内で、数を16進数の文字列にする（２番目の数は桁数、省略可）,https://ichigojam.github.io/print/ja/HEX.html,
87,`,バック・クォート,,`2進数,`1010,2進数で数を表記する,https://ichigojam.github.io/print/ja/BIN.html,
88,BIN,バイナリー,,"BIN$(数1{,数2})","?BIN$(255,8)",PRINT内で、数を2進数の文字列にする（２番目の数は桁数、省略可）,https://ichigojam.github.io/print/ja/BIN.html,
89,&,アンパサンド,,数 & 数,?3&1,論理積（ビット演算）,https://ichigojam.github.io/print/ja/LOGIC.html,
90,|,パイプ,,数 | 数,?3|1,論理和（ビット演算）,https://ichigojam.github.io/print/ja/LOGIC.html,
91,^,ハット,,数 ^ 数,?A^1,排他的論理和（ビット演算）,https://ichigojam.github.io/print/ja/LOGIC.html,
92,>>,シフト・ライト,,数 >> 数,?A>>1,右シフトする（ビット演算）,,
93,<<,シフト・レフト,,数 << 数,?A<<1,左シフトする（ビット演算）,,
94,~,チルダ,,~数,?~A,ビット反転（ビット演算）,,
95,COS,コサイン,,COS(数),?COS(90),指定された数を角度の度数としてコサインの値の256倍を返す *ver1.4以上,https://ichigojam.github.io/print/ja/DRAWFLOWER.html,
96,SIN,サイン,,SIN(数),?SIN(90),指定された数を角度の度数としてサインの値の256倍を返す *ver1.4以上,https://ichigojam.github.io/print/ja/DRAWFLOWER.html,
97,STOP,ストップ,,STOP,STOP,プログラムを中断する,,
98,CONT,コンティニュー,,CONT,CONT,実行中の行や、中断した行を再度実行する,,
99,SOUND,サウンド,,SOUND(),?SOUND(),音が再生中なら1、そうで無いとき0をを返す,,
100,FREE,フリー,,FREE(),?FREE(),プログラムの残りメモリ数を返す,,
101,VER,バージョン,,VER({数}),?VER(),IchigoJam BASICのバージョン番号を返す,,
102,RENUM,リナンバー,,"RENUM {数1{,数2}}",RENUM,プログラムの行番号を数1(省略時は10)から数2(省略時は10)刻みにする。GOTO/GOSUBの飛び先は手で変更必要な場合がある,,
103,LRUN,ロードラン,,"LRUN {数1{,数2}}",LRUN 1,ファイル数1のプログラムを読み込み後、実行する(数2が指定されていたらその行へGOTO),https://ichigojam.github.io/print/ja/LRUN.html,
104,FILE,ファイル,,FILE(),?FILE(),最後にプログラムを読み込み、書き込み行った数を返す,,
105,LINE,ライン,,LINE(),?LINE(),現在実行中の行番号を返す（非実行時は0）,,
106,SRND,エス・ランダム,,SRND 数,SRND 0,種を指定して乱数を初期化する,,
107,HELP,ヘルプ,,HELP,HELP,メモリマップを表示する,,
108,PEEK,ピーク,,PEEK(数),?PEEK(#700),メモリ読み出し（キャラクターパターン0-#7FFなど）,,
109,POKE,ポーク,,"POKE 数,数","POKE #700,#FF","メモリへの書き込み（連続書き込み可能 POKE#700,1,2,3）",https://ichigojam.github.io/print/ja/PCG.html,
110,COPY,コピー,,"COPY 数1,数2,数3","COPY #900,0,256",メモリコピー 数1のアドレスへ数2のアドレスから数3の長さ分コピー(数3マイナスでコピー方向が逆になる),,
111,CLP,クリア・パターン,,CLP,CLP,キャラクターパターン(#700-#7FF)を初期化する,,
112,"""",ダブル・クォート,,"""文字列""","A=""ABC""",文字列の先頭アドレスを返す,,
113,STR,ストリング,,"STR$(数1{,数2})",PRINT STR$(A),PRINT内で、文字列を返す（数2(省略可)で長さ指定）,,
114,LEN,レングス,,"LEN(""文字列"")","PRINT LEN(""ABC"")",文字列の長さを返す,,
115,@,アット・マーク,,@ラベル,@LOOP,行の先頭に書くとラベルとなり、行番号の代わりとして使える（GOTO @LOOPなど） ※前方一致,,
116,VIDEO,ビデオ,,"VIDEO 数1{,数2}",VIDEO 0,画面表示非表示を切り替える 0で画面表示を停止し処理高速化 （F8で表示）、省略可能な数2でVIDEO0時CPUクロックを1/数2に変更し省電力化、数1が2の倍数で白黒反転、数1が3以上で拡大モード,,
117,RESET,リセット,,RESET,RESET,IchigoJamをリセットする,,
118,SLEEP,スリープ,,SLEEP,SLEEP,プログラムを休止する (ボタンを押すと起動し、LRUN0を実行する),,
119,UART,ユー・アート,,"UART 数1{,数2}",UART 0,数1：シリアル出力設定（0:オフ、1:PRINTのみ、2:PRINT/LC/CLS/SCROLL、3:PRINTのみ/改行コード\r\n、+4で入力エコーバック、+8で画面表示OFF、初期値:2）、数2：シリアル受信設定（0:オフ、1:オン、+2:ESC無効、+4:CR変換(13→10) 省略時1）,,
120,BPS,ビー・ピー・エス,,"BPS 数1{,数2}",BPS 9600,"シリアル通信速度を変更する(0で初期値の115,200bps、-1:57600bps、-2:38400bps、-100以下指定で指定した数の-100倍bpsに指定、-2304:230400bps)。数2でI2Cの通信速度設定（単位kHz、0:デフォルト400kHz)",,
121,OK,オーケー,,OK {数},OK 2,OKやエラーメッセージの表示有無を切り替える（数、1:表示、2:非表示、省略で1）,,
122,I2CR,アイ・ツー・シー・リード,,"I2CR(数1,数2,数3,数4,数5)","R=I2CR(#50,#114A,2,#114C,2)",I2Cで周辺機器から読み込む I2Cアドレス、コマンド送信アドレス・長さ、受信アドレスと長さ（コマンド送信が1byteの時数3を省略可、コマンド送信が0byteの時数2/数3を省略可）,,
123,I2CW,アイ・ツー・シー・ライト,,"I2CW(数1,数2,数3,数4,数5)","R=I2CW(#50,#114A,2,#114C,2)",I2Cで周辺機器に書き込む I2Cアドレス、コマンド送信アドレス・長さ、送信アドレスと長さ（数4/数5は省略可、コマンド送信が1byteの時数3を省略可）,,
124,IOT.IN,アイ・オー・ティー・イン,,IoT.IN(),R=IoT.IN(),sakura.ioモジュールから受信した数を一つ読み込む,,
125,IOT.OUT,アイ・オー・ティー・アウト,,IoT.OUT 数,IoT.OUT 100,sakura.ioモジュールへ数をチャンネル0で即時送信する,,
126,WS.LED,ダブリュー・エス・エル・イー・ディー,,"WS.LED 数1{,数2}",WS.LED 3,配列の先頭から緑赤青の順に設定された値でLEDに接続されたWS2812Bを数1の分光らせる。数2を指定するとその数だけ繰り返す。 *ver1.4以上,,
127,SWITCH,スイッチ,,"SWITCH {数1{,数2}}",SWITCH,画面表示をテレビと液晶とを切り替える（数1 0:テレビ、1:液晶）、数2で液晶の濃さを指定,,
128,USR,ユーザー,,"USR(数1{,数2})","A=USR(#700,0)",数1で指定されたアドレスのマシン語(Arm Cortex-M0)を数2をパラメータとして呼び出す（数2省略で0）,,ビ、1:液晶）、数2で液晶の濃さを指定,,
128,USR,ユーザー,なし,"USR(数1{,数2})","A=USR(#700,0)",数1で指定されたアドレスのマシン語(Arm Cortex-M0)を数2をパラメータとして呼び出す（数2省略で0）,,